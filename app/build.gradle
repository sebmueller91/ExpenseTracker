plugins {
    id("com.android.application")
    id("kotlin-android")
    id("kotlin-kapt")
    id("com.google.devtools.ksp")
}

def getVersionProperties() {
    Properties versionProps = new Properties()
    try {
        File versionPropsFile = file("../version.properties")
        if (versionPropsFile.exists()) {
            versionProps.load(versionPropsFile.newDataInputStream())
        } else {
            println "version.properties file not found"
        }
    } catch (Exception e) {
        println "Error reading version.properties file: " + e.getMessage()
    }
    return versionProps
}

def generateVersionCode(String versionName) {
    if (versionName == null) {
        versionName = "0.0.1"
    }
    def (major, minor, patch) = versionName.tokenize('.').collect { it.toInteger() }
    return major * 10000 + minor * 100 + patch
}

def getFullVersionName() {
    String versionName = "0.0.0"
    try {
        Properties versionProps = getVersionProperties()
        versionName = versionProps.getProperty("version_name", versionName)
    } catch (Exception e) {
        println "Error reading version.properties file: " + e.getMessage()
    }
    return versionName
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

android {
    namespace 'com.example.expensetracker'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.expensetracker"
        minSdk 28
        targetSdk 34
        versionCode generateVersionCode(getVersionProperties().getProperty("version_name"))
        versionName getFullVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            storeFile file('../keystore.jks')
            storePassword System.getenv('KEYSTORE_PASSWORD')
            keyAlias System.getenv('KEY_ALIAS')
            keyPassword System.getenv('KEY_PASSWORD')
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "expenseTracker.apk"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.5'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation libs.compose.ui.tooling.preview
    implementation libs.androidx.navigation.compose
    implementation libs.lifecycle.runtime.compose
    implementation libs.material3

    kapt libs.androidx.lifecycle.compiler

    implementation libs.timber

    implementation libs.accompanist.navigation.animation

    implementation(libs.core)
    ksp(libs.ksp)

    implementation libs.androidx.material.icons.extended

    implementation libs.koin.android
    implementation libs.koin.androidx.compose

    testImplementation libs.junit
    testImplementation libs.koin.test
    testImplementation libs.mockk
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
}